#!/usr/bin/env python3
import tqdm
from nclib import netcat
import sys
import re
import itertools

def calc_keys(hk, keys):
    hexrange = "0123456789abcdef"
    h = 0
    for keypos in range(0,4):
        for x in range(0,255):
            found = True
            for tindx in range(keypos, len(hk), 4):
                tval = hk[tindx] ^ x
                if chr(tval) not in hexrange:
                    found = False
                    break
                else:
                    h += 1
                    pass

            if found:
                keys[keypos].add(x)

def dec(ehk, key):
    dechk = bytearray(ehk)
    keypos = 0
    for pos in range(0, len(ehk)):
        dechk[pos] = ehk[pos] ^ key[pos % len(key)]

    return bytes(dechk)

def main():

    host = sys.argv[1]
    port = int(sys.argv[2])

    success = False

    for _ in range(0, 4):
        #result = conn.recvuntil(b'awesome chall\n')
        initial_key = b'c0dec0dec0dec0dec0dec0dec0dec0de'
        to_send = b'e' + initial_key + b'n'*21 + b'v'*7 + b'npx'

        possible_hks = set()
        foundcnt = 0
        attempts = 0
        cur_len = 0
        while foundcnt < 4:
            conn = netcat.Netcat((host, port))
            conn.send(to_send)

            guess = b''
            regex = initial_key + rb"([\x00-\xff]{24,32})\n"
            encrypted_hk = b""
            line = conn.recv_line(timeout=1)
            while line:
                match = re.match(regex, line)
                if match:
                    encrypted_hk = match.group(1)
                    print(encrypted_hk, len(encrypted_hk))
                    break
                line = conn.recv_line(timeout=1)
            conn.close()
            if encrypted_hk:
                foundcnt += 1
                keys = [set(), set(), set(), set()]
                calc_keys(encrypted_hk, keys)
                hkset = set()
                for key in list(itertools.product(*keys)):
                    hkset.add(dec(encrypted_hk, key))
                if len(possible_hks) == 0:
                    possible_hks.update(hkset)
                else:
                    possible_hks.intersection(hkset)
            attempts += 1
            if attempts > 16:
                print("failed to find any matches")
                sys.exit(99)

        success = False
        possible_hks = list(possible_hks)

        print(f"Starting spray with {len(possible_hks)} ")
        possible_hks = sorted(possible_hks)
        total = len(possible_hks)

        #for guess in tqdm.tqdm(possible_hks):
        for guess in possible_hks:
            outstr = b'e' + guess + b'joshua\nvx'

            conn = netcat.Netcat((host, port))
            conn.send(outstr)

            result = conn.recv_until('Authorization failed!', timeout=20)

            conn.close()

            flag_rex = br'OOO\{.*\}'
            match = re.search(flag_rex, result)
            if match:
                print(match.group(0).decode('latin-1'))
                success = True
                break

            # if not match:
            #     print(result.decode('latin-1'))
        if success:
            break

    assert success

    sys.exit(0)


if __name__ == '__main__':
    main()
    

